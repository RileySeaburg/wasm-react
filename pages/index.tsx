import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { createFFmpeg, fetchFile, FFmpeg } from '@ffmpeg/ffmpeg'
import { useEffect, useRef, useState } from 'react'
import { useReactMediaRecorder } from "react-media-recorder";


export default function Home() {
  const [stream, setStream] = useState<MediaStream>()
  const [playing, setPlaying] = useState(false)
  const { status, startRecording, stopRecording, mediaBlobUrl } = useReactMediaRecorder({ video: true });

  const [gif, setGif] = useState<String>()
  // create ffmpeg instance
  const recorder = new MediaRecorder(stream as MediaStream)
  const ffmpeg = createFFmpeg({
    mainName: 'main',
    corePath: 'https://unpkg.com/@ffmpeg/core-st@0.11.1/dist/ffmpeg-core.js',
  });


  const startVideoPlayer = () => {
    navigator.mediaDevices.getUserMedia({
      video: true,
      audio: false
    }).then((stream) => {
      let video = document.querySelector('video') as HTMLVideoElement
      video.srcObject = stream
      setPlaying(true)
      setStream(stream)
    })
  }

  const stopVideoPlayer = () => {
    stream?.getTracks().forEach((track) => {
      track.stop()
    })
    setPlaying(false)

  }

//  this needs to stream into a blob

  //  save recording to file
  // assign proper metadata to the file
  // ensure length of the video is noted

  const saveRecording = async () => {
    const newURL = URL.createObjectURL(recorder?.stream)
    const blob = await fetch(mediaBlobUrl).then(r => r.blob())
    const file = new File([blob], "test.mp4", {
      type: blob.type,
      lastModified: Date.now()
    })
    console.log(file)
    const reader = new FileReader()
    reader.readAsDataURL(file)
    reader.onloadend = function () {
      const base64data = reader.result;
      console.log(base64data)
    }
  }



  // convert to gif
  const convertToGif = async () => {

    await ffmpeg.load()

    // write the file to memory
    ffmpeg.FS('writeFile', 'test.webm', await fetchFile(recording as Blob))
    // run the ffmpeg command
    await ffmpeg.run('-i', 'test.webm', '-t', '2.5', '-ss', '2.0', '-f', 'gif', 'out.gif')
    // read the result
    const data = ffmpeg.FS('readFile', 'out.gif')
    // create a URL
    const url = URL.createObjectURL(new Blob([data.buffer], { type: 'image/gif' }))
    setGif(url)
  }

  // stream video
  const streamVideo = async () => {

    if (!ffmpeg.isLoaded()) {
      console.log('ffmpeg not loaded')
      await ffmpeg.load()
      
    }

    ffmpeg.FS('writeFile', 'test.mp4', await fetchFile(recording as Blob))
    // grab the video that was just created
    const video = ffmpeg.FS('readFile', 'test.mp4')
    // log video to console
    console.log(video)
    // run the ffmpeg command
    await ffmpeg.run('-i', 'test.mp4', '-f', 'mp4', '-c:v', 'libx264', '-preset', 'ultrafast', '-tune', 'zerolatency', '-c:a', 'aac', '-b:a', '128k', '-f', 'flv', 'rtmp:localhost:1935/live/test', '-y')
  
    //log the output
    console.log(ffmpeg.FS('readFile', 'test.mp4'))
  }

  // stop streaming video
  const stopStreamingVideo = async () => {
    if (!ffmpeg.isLoaded()) {
      await ffmpeg.load()
    }
    await ffmpeg.exit()
  }

  //  log recording to console every 0.5 seconds
  useEffect(() => {
    if (recording) {
      let interval = setInterval(() => {
        console.log(recording)
      }, 500)
      return () => clearInterval(interval)
    }
  }, [recording])


  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <video
          className='video-player'
          autoPlay muted
        ></video>
        <button onClick={startVideoPlayer}>Start</button>
        <button onClick={stopVideoPlayer}>Stop</button>
        <button onClick={startRecording}>Start Recording</button>
        <button onClick={stopRecording}>Stop Recording</button>
        <button onClick={convertToGif}>Convert to Gif</button>
        <button onClick={saveRecording}>Save Recording</button>
        <button onClick={streamVideo}>Stream Video</button>
        <button onClick={stopStreamingVideo}>Stop Streaming Video</button>


      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}
